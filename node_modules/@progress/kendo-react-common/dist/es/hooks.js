import * as React from 'react';
/**
 * @hidden
 */
export var useRtl = function (elementRef, initialDir) {
    // Dir prop is read only on initial rendering due to specifics of getComputedStyles - see below
    var _a = React.useState(initialDir), rtl = _a[0], setRtl = _a[1];
    React.useEffect(function () {
        if (!rtl && window && elementRef.current) {
            // Note: getComputedStyle forces reflow
            var rtlCandidate = window.getComputedStyle(elementRef.current).direction;
            if (rtlCandidate) {
                // rerender is needed as DOM is read after first render
                setRtl(rtlCandidate);
            }
        }
    }, []);
    return rtl;
};
/**
 * An utility function for asynchronous focus/blur handling.
 *
 * By default, the `onFocus` and `onBlur` callbacks are called every time a child components receives/loses focus.
 * Use this utility hook for scenarios where you need to know if the parent has received focus for the first time, or completely lost focus.
 */
export function useAsyncFocusBlur(_a) {
    var onFocus = _a.onFocus, onBlur = _a.onBlur;
    var tick = React.useRef(0);
    var nextTick = React.useCallback(function (f) {
        clearTimeout(tick.current);
        tick.current = setTimeout(function () { return f(); });
    }, [tick]);
    var handleFocus = React.useCallback(function () {
        var event = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            event[_i] = arguments[_i];
        }
        clearTimeout(tick.current);
        if (onFocus) {
            onFocus.call.apply(onFocus, [undefined].concat(event));
        }
    }, [onFocus, tick]);
    var handleBlur = React.useCallback(function () {
        var event = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            event[_i] = arguments[_i];
        }
        nextTick(function () { if (onBlur) {
            onBlur.call.apply(onBlur, [undefined].concat(event));
        } });
    }, [nextTick]);
    return {
        onFocus: handleFocus,
        onBlur: handleBlur
    };
}
//# sourceMappingURL=hooks.js.map